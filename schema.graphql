schema {
  query: Query
  mutation: Mutation
}

input CreateProductDto {
  description: String!
  image: String!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EOrder {
  ASC
  DESC
}

input GetPaginatedRecordsDto {
  createdFrom: DateTime
  createdTo: DateTime
  excludeIds: [String!]
  includeIds: [String!]
  isDeleted: Boolean
  isSelectAll: Boolean
  keySearch: String
  order: EOrder
  page: Float
  take: Float
}

input GetUsersPaginatedDto {
  createdFrom: DateTime
  createdTo: DateTime
  excludeIds: [String!]
  includeIds: [String!]
  isDeleted: Boolean
  isSelectAll: Boolean
  keySearch: String
  order: EOrder
  page: Float
  roleIds: [Float!]
  take: Float
}

type Mutation {
  createProduct(payload: CreateProductDto!): ProductEntity!
  deleteProduct(id: String!): String!
  refreshToken(payload: RefreshTokenDto!): SignInResponseDto!
  signIn(payload: SignInDto!): SignInResponseDto!
  signOut: Float!
  signUp(payload: SignUpDto!): SignInResponseDto!
  updatePassword(payload: UpdatePasswordDto!): SignInResponseDto!
  updateProduct(id: String!, payload: CreateProductDto!): ProductEntity!
  updateProfile(payload: UpdateProfileDto!): UserEntity!
  updateUser(id: String!, payload: UpdateUserDto!): UserEntity!
}

type PaginatedProductsResponseDto {
  data: [ProductEntity!]!
}

type ProductEntity {
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  id: String!
  image: String!
  name: String!
  updatedAt: DateTime!
}

type Query {
  getPaginatedProducts(queryParams: GetPaginatedRecordsDto!): PaginatedProductsResponseDto!
  getPaginatedUsers(queryParams: GetUsersPaginatedDto!): UserEntity!
  getProfile: UserEntity!
  getUser(id: String!): UserEntity!
}

input RefreshTokenDto {
  accessToken: String!
}

type RoleEntity {
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  id: Float!
  name: String!
  updatedAt: DateTime!
}

input SignInDto {
  email: String!
  password: String!
}

type SignInResponseDto {
  accessToken: String!
}

input SignUpDto {
  avatar: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input UpdatePasswordDto {
  newPassword: String!
  oldPassword: String!
}

input UpdateProfileDto {
  avatar: String!
  firstName: String!
  lastName: String!
}

input UpdateUserDto {
  avatar: String!
  firstName: String!
  lastName: String!
  roleId: Float!
}

type UserEntity {
  avatar: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  isEmailVerified: Boolean!
  lastName: String!
  role: RoleEntity
  roleId: Float!
  updatedAt: DateTime!
}